{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Seok\\\\Desktop\\\\\\uCF54\\uB529\\\\22\\uB144 9\\uC6D4\\\\20220919\\\\src\\\\components\\\\BlockFn.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BlockFn = () => {\n  _s();\n\n  const [num, setNum] = useState(0);\n  const [num2, setNum2] = useState(0); // useEffect()가 생명주기함수를 사용할 수 있게 함수형에서도\n  // 리액트에서 지원해주는 유용한 함수(react hook)\n  // 빈배열은 componentDidMount라는 것.\n  // useEffect(() => {\n  //   // 여기에서 데이터를 불러와서 UI에 렌더링 해준다.\n  //   console.log(\"componentDidMount\");\n  // }, []);\n  // componentDidUpdate 만들기\n  // num을 주시하고 있다. 주시하는 값이 바뀌면 실행되는 함수\n  // 배열안에 추가한 값을 주시하다가 바뀌면 실행된다.\n  // useEffect = componentDidMount + componentDidUpdate\n  // 그래서 조건으로 처리를 해줘야한다.\n\n  useEffect(() => {\n    console.log(\"num : \" + num);\n    console.log(\"num2 : \" + num2);\n    console.log(\"componentDidUpdate\");\n  }, [num, num2]);\n\n  const add = () => {\n    setNum(num + 1);\n    setNum2(num2 - 1); //console.log(num);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(BlockFn, \"qErbNcit3n2bMs8CrKxBTKpA3e0=\");\n\n_c = BlockFn;\nexport default BlockFn;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlockFn\");","map":{"version":3,"names":["React","Fragment","useState","useEffect","BlockFn","num","setNum","num2","setNum2","console","log","add"],"sources":["C:/Users/Seok/Desktop/코딩/22년 9월/20220919/src/components/BlockFn.js"],"sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\n\nconst BlockFn = () => {\n  const [num, setNum] = useState(0);\n  const [num2, setNum2] = useState(0);\n  // useEffect()가 생명주기함수를 사용할 수 있게 함수형에서도\n  // 리액트에서 지원해주는 유용한 함수(react hook)\n\n  // 빈배열은 componentDidMount라는 것.\n  // useEffect(() => {\n  //   // 여기에서 데이터를 불러와서 UI에 렌더링 해준다.\n  //   console.log(\"componentDidMount\");\n  // }, []);\n\n  // componentDidUpdate 만들기\n  // num을 주시하고 있다. 주시하는 값이 바뀌면 실행되는 함수\n  // 배열안에 추가한 값을 주시하다가 바뀌면 실행된다.\n  // useEffect = componentDidMount + componentDidUpdate\n  // 그래서 조건으로 처리를 해줘야한다.\n  useEffect(() => {\n    console.log(\"num : \" + num);\n    console.log(\"num2 : \" + num2);\n    console.log(\"componentDidUpdate\");\n  }, [num, num2]);\n\n  const add = () => {\n    setNum(num + 1);\n    setNum2(num2 - 1);\n    //console.log(num);\n  };\n  return (\n    <>\n      <button onClick={add}>add</button>\n    </>\n  );\n};\n\nexport default BlockFn;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;;;;AAEA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBJ,QAAQ,CAAC,CAAD,CAA9B;EACA,MAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,CAAD,CAAhC,CAFoB,CAGpB;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;;EACAC,SAAS,CAAC,MAAM;IACdM,OAAO,CAACC,GAAR,CAAY,WAAWL,GAAvB;IACAI,OAAO,CAACC,GAAR,CAAY,YAAYH,IAAxB;IACAE,OAAO,CAACC,GAAR,CAAY,oBAAZ;EACD,CAJQ,EAIN,CAACL,GAAD,EAAME,IAAN,CAJM,CAAT;;EAMA,MAAMI,GAAG,GAAG,MAAM;IAChBL,MAAM,CAACD,GAAG,GAAG,CAAP,CAAN;IACAG,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP,CAFgB,CAGhB;EACD,CAJD;;EAKA,oBACE;IAAA,uBACE;MAAQ,OAAO,EAAEI,GAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAKD,CAjCD;;GAAMP,O;;KAAAA,O;AAmCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}