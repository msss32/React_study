{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Seok\\\\Desktop\\\\\\uCF54\\uB529\\\\22\\uB144 9\\uC6D4\\\\20220919\\\\src\\\\App.js\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { rock, scissors, paper, srp } from \"./imgs\";\nimport BlockFn from \"./components/BlockFn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  // /* 필요한거.\n  // 일단 간단한 가위바위보를 만들자\n  // 플레이어 영역 하나, 컴퓨터 영역 하나\n  // 플레이어가 가위나 바위나 보를 선택해서 버튼을 누르면\n  // 플레이어가 선택한 이미지가 플레이어 영역에 보이고\n  // 컴퓨터는 랜덤한 값을 이용해서 가위바위보 이미지가 보이게 만들고\n  // 결과를 win lose 표시하기.\n  // */\n  // //플레이어 컴퓨터 영역(컴포넌트로 정리)\n  // // 이 객체는 선택할 데이터를 객체로 정리 해준것\n  // const select = {\n  //   scissors: {\n  //     name: \"가위\",\n  //     img: scissors,\n  //   },\n  //   rock: {\n  //     name: \"바위\",\n  //     img: rock,\n  //   },\n  //   paper: {\n  //     name: \"보\",\n  //     img: paper,\n  //   },\n  //   default: {\n  //     name: \"default\",\n  //     img: srp,\n  //   },\n  // };\n  // // 유저가 선택한 값을 담아놓고 주시해야한다.\n  // // 선택하면 데이터가 바뀌어서 다시 그려줘야 하기 때문에. (이미지가 변해야함)\n  // // 유저의 선택 값을 담을 useState()\n  // const [userSelect, setUserSelect] = useState(select[\"default\"]); // key값을 전달하기 위해 문자열로 해서 전달\n  // // 컴퓨터의 선택 값을 담을 useState()\n  // const [comSelect, setComSelect] = useState(select[\"default\"]);\n  // // 승패 결과를 담아줄 useState()\n  // const [result, setResult] = useState(\"\");\n  // // 컴퓨터는 버튼이 없으므로, 유저가 선택하면 랜덤으로 값이 전달되어야하는데\n  // // Math.random()를 이용해서 랜덤값을 받아오고,\n  // // 받아온 값으로 위에 만든 객체에서 값을 가져와야하는데\n  // // 객체에서 키값만 뽑아서 배열로 만들자!\n  // // let arr = Object.keys(select) 함수로 반환해주면\n  // // arr 변수안에 키값만 뽑아서 배열로 받아준다.\n  // function userClick(temp) {\n  //   setUserSelect(select[temp]);\n  //   //Object.keys()를 사용해서 객체의 키값만 뽑아서 배열을 반환 받아서 arr변수에 바인딩.\n  //   let arr = Object.keys(select);\n  //   // 랜덤한 숫자 3개(0, 1, 2)\n  //   let comRandom = Math.floor(Math.random() * 3);\n  //   // arr[comRandom] >> 랜덤한 키값이 뽑힌다.\n  //   // select 객체의 값을 불러오는 방법은\n  //   // 1. select. 으로 가져온다.\n  //   // 2. select['문자열'] 으로 가져온다.\n  //   // 두가지 방법이 있는데, 우리가 선택한건 2번.\n  //   setComSelect(select[arr[comRandom]]);\n  //   //결과를 가지고 승패를 보여준다.\n  //   let player = select[temp];\n  //   let computer = select[arr[comRandom]];\n  //   /* 조건\n  //   1. 유저와 컴퓨터가 같으면 무승부\n  //   2. 유저가 가위 일때 컴퓨터가 보 win, 주먹 lose\n  //   3. 유저가 보 일때 컴퓨터가 주먹 win, 가위 lose\n  //   4. 유저가 주먹 일때 컴퓨터가 가위 win, 보 lose */\n  //   if (player.name == computer.name) {\n  //     setResult(\"Draw\");\n  //   } else if (player.name == \"가위\") {\n  //     let temp = computer.name == \"보\" ? \"Win\" : \"Lose\";\n  //     setResult(temp);\n  //   } else if (player.name == \"바위\") {\n  //     let temp = computer.name == \"가위\" ? \"Win\" : \"Lose\";\n  //     setResult(temp);\n  //   } else if (player.name == \"보\") {\n  //     let temp = computer.name == \"바위\" ? \"Win\" : \"Lose\";\n  //     setResult(temp);\n  //   }\n  // }\n  // /*\n  // 1. 우리가 만들어 놓은 객체의 값이 필요하기 때문에 userClick()를 만들었고\n  // 그 값을 저장해주는 userSelect변수를 useState()를 통해서 만들어줬고\n  // 2. 버튼을 클릭했을때 그 함수가 실행되고 state값이 변하기 때문에 다시 리렌더링한다.\n  // 부모가 리렌더링 되었으므로 자식 컴포넌트도 리렌더링 된다.\n  // Block에 우리는 userClick을 실행하고 setUserSelect()로 변경한\n  // userSelect 값을 props로 넘겨줬다.\n  // Block에서는 props로 넘겨받은 값을 사용해서 img의 경로를 받아서 이미지를 보여줬다.\n  // ㄴ how? 부모가 리렌더링 됐기때문에 자식도 변한 값이 리렌더링 된것이다.*/\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(BlockFn, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","rock","scissors","paper","srp","BlockFn","App"],"sources":["C:/Users/Seok/Desktop/코딩/22년 9월/20220919/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport { rock, scissors, paper, srp } from \"./imgs\";\nimport BlockFn from \"./components/BlockFn\";\n\nfunction App() {\n  // /* 필요한거.\n  // 일단 간단한 가위바위보를 만들자\n  // 플레이어 영역 하나, 컴퓨터 영역 하나\n  // 플레이어가 가위나 바위나 보를 선택해서 버튼을 누르면\n  // 플레이어가 선택한 이미지가 플레이어 영역에 보이고\n  // 컴퓨터는 랜덤한 값을 이용해서 가위바위보 이미지가 보이게 만들고\n  // 결과를 win lose 표시하기.\n  // */\n\n  // //플레이어 컴퓨터 영역(컴포넌트로 정리)\n\n  // // 이 객체는 선택할 데이터를 객체로 정리 해준것\n  // const select = {\n  //   scissors: {\n  //     name: \"가위\",\n  //     img: scissors,\n  //   },\n  //   rock: {\n  //     name: \"바위\",\n  //     img: rock,\n  //   },\n  //   paper: {\n  //     name: \"보\",\n  //     img: paper,\n  //   },\n  //   default: {\n  //     name: \"default\",\n  //     img: srp,\n  //   },\n  // };\n\n  // // 유저가 선택한 값을 담아놓고 주시해야한다.\n  // // 선택하면 데이터가 바뀌어서 다시 그려줘야 하기 때문에. (이미지가 변해야함)\n  // // 유저의 선택 값을 담을 useState()\n  // const [userSelect, setUserSelect] = useState(select[\"default\"]); // key값을 전달하기 위해 문자열로 해서 전달\n\n  // // 컴퓨터의 선택 값을 담을 useState()\n  // const [comSelect, setComSelect] = useState(select[\"default\"]);\n\n  // // 승패 결과를 담아줄 useState()\n  // const [result, setResult] = useState(\"\");\n\n  // // 컴퓨터는 버튼이 없으므로, 유저가 선택하면 랜덤으로 값이 전달되어야하는데\n  // // Math.random()를 이용해서 랜덤값을 받아오고,\n  // // 받아온 값으로 위에 만든 객체에서 값을 가져와야하는데\n  // // 객체에서 키값만 뽑아서 배열로 만들자!\n  // // let arr = Object.keys(select) 함수로 반환해주면\n  // // arr 변수안에 키값만 뽑아서 배열로 받아준다.\n\n  // function userClick(temp) {\n  //   setUserSelect(select[temp]);\n\n  //   //Object.keys()를 사용해서 객체의 키값만 뽑아서 배열을 반환 받아서 arr변수에 바인딩.\n  //   let arr = Object.keys(select);\n  //   // 랜덤한 숫자 3개(0, 1, 2)\n  //   let comRandom = Math.floor(Math.random() * 3);\n  //   // arr[comRandom] >> 랜덤한 키값이 뽑힌다.\n  //   // select 객체의 값을 불러오는 방법은\n  //   // 1. select. 으로 가져온다.\n  //   // 2. select['문자열'] 으로 가져온다.\n  //   // 두가지 방법이 있는데, 우리가 선택한건 2번.\n  //   setComSelect(select[arr[comRandom]]);\n\n  //   //결과를 가지고 승패를 보여준다.\n  //   let player = select[temp];\n  //   let computer = select[arr[comRandom]];\n  //   /* 조건\n  //   1. 유저와 컴퓨터가 같으면 무승부\n  //   2. 유저가 가위 일때 컴퓨터가 보 win, 주먹 lose\n  //   3. 유저가 보 일때 컴퓨터가 주먹 win, 가위 lose\n  //   4. 유저가 주먹 일때 컴퓨터가 가위 win, 보 lose */\n  //   if (player.name == computer.name) {\n  //     setResult(\"Draw\");\n  //   } else if (player.name == \"가위\") {\n  //     let temp = computer.name == \"보\" ? \"Win\" : \"Lose\";\n  //     setResult(temp);\n  //   } else if (player.name == \"바위\") {\n  //     let temp = computer.name == \"가위\" ? \"Win\" : \"Lose\";\n  //     setResult(temp);\n  //   } else if (player.name == \"보\") {\n  //     let temp = computer.name == \"바위\" ? \"Win\" : \"Lose\";\n  //     setResult(temp);\n  //   }\n  // }\n  // /*\n  // 1. 우리가 만들어 놓은 객체의 값이 필요하기 때문에 userClick()를 만들었고\n  // 그 값을 저장해주는 userSelect변수를 useState()를 통해서 만들어줬고\n  // 2. 버튼을 클릭했을때 그 함수가 실행되고 state값이 변하기 때문에 다시 리렌더링한다.\n  // 부모가 리렌더링 되었으므로 자식 컴포넌트도 리렌더링 된다.\n\n  // Block에 우리는 userClick을 실행하고 setUserSelect()로 변경한\n  // userSelect 값을 props로 넘겨줬다.\n\n  // Block에서는 props로 넘겨받은 값을 사용해서 img의 경로를 받아서 이미지를 보여줬다.\n  // ㄴ how? 부모가 리렌더링 됐기때문에 자식도 변한 값이 리렌더링 된것이다.*/\n  return (\n    <div className=\"App\">\n      <BlockFn></BlockFn>\n      {/* <div className=\"com\">\n        <Block data={comSelect} name=\"com\" result={result} />\n      </div>\n      <div className=\"player\">\n        <Block data={userSelect} name=\"user\" result={result} />\n\n        <button\n          onClick={() => {\n            userClick(\"scissors\");\n          }}\n        >\n          가위\n        </button>\n        <button\n          onClick={() => {\n            userClick(\"rock\");\n          }}\n        >\n          바위\n        </button>\n        <button\n          onClick={() => {\n            userClick(\"paper\");\n          }}\n        >\n          보\n        </button>\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,WAAP;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,KAAzB,EAAgCC,GAAhC,QAA2C,QAA3C;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,SAASC,GAAT,GAAe;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAiCD;;KAjIQA,G;AAmIT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}